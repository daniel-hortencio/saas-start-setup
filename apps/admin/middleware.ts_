// middleware.ts
import { withAuth } from "next-auth/middleware";
import { getServerSession } from "next-auth";
import { NextRequest, NextResponse } from "next/server";
import { hasSession } from "./shared/lib/auth";

/* export default withAuth(
  function middleware(req) {
    // Aqui você pode adicionar lógica adicional se necessário
    console.log({ req });

    return NextResponse.next();
  },
  {
    callbacks: {
      authorized: ({ access_token }: any) => {
        // Verifica se o usuário tem um access_token (autenticado)
        return !!access_token;
      },
    },
    pages: {
      signIn: "/", // Página para redirecionamento se não autenticado
    },
  },
); */
/*
export const config = {
  matcher: ["/dashboard/:path*"], // Defina os caminhos que precisam de autenticação
};
 */

export async function middleware(request: NextRequest) {
  console.log({ request });

  const url = request.nextUrl.toString();

  console.log({ url });

  console.log({ session: await hasSession() });

  return NextResponse.next();
  //return NextResponse.redirect(new URL("/home", request.url));
}

export const config = {
  matcher: ["/dashboard/:path*"], // Defina os caminhos que precisam de autenticação
};
